export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"vCard.js","sourceRoot":"C:/Users/Stephanie/Documents/ngx-vcard/projects/ngx-vcard/src/","sources":["lib/types/vCard.ts"],"names":[],"mappings":"","sourcesContent":["import { BasicPropertyParameters } from \"./parameter/BasicPropertyParameters.type\";\r\n\r\n/**\r\n * vCard interface with properties for the vCard format, which allows the capture and exchange of\r\n   information normally stored within an address book or directory application.\r\n * Explanations from [RFC 6350](https://tools.ietf.org/html/rfc6350)\r\n * Does not support xml Encapsulation.\r\n */\r\nexport interface VCard {\r\n  /***********************************************************************************************\r\n   * General Property\r\n   ***********************************************************************************************/\r\n\r\n  /**\r\n   * The source of directory information contained in the content type.\r\n   * @kind SOURCE\r\n   * @link https://tools.ietf.org/html/rfc6350#section-6.1.3\r\n   */\r\n  source?: string | { value: string; param: BasicPropertyParameters };\r\n  /**\r\n   * The kind of object the vCard represents.\r\n   * @kind KIND\r\n   */\r\n  kind?: \"individual\" | \"group\" | \"org\" | \"location\";\r\n  /**\r\n   * Include extended XML-encoded vCard data in a plain vCard.\r\n   * @kind XML\r\n   * @link https://tools.ietf.org/html/rfc6350#section-6.1.5\r\n   */\r\n  xml?: string;\r\n\r\n  /***********************************************************************************************\r\n   * Identification Properties\r\n   ***********************************************************************************************/\r\n\r\n  /**\r\n   * The formatted text corresponding to the name of the object the vCard represents.\r\n   * (will automatically populatet if not set)\r\n   * @kind FN\r\n   */\r\n  // formattedName?: Name | { work?: Name, home?: Name };\r\n  formattedName?: Name;\r\n\r\n  /**\r\n   * The name of the object the vCard represents.\r\n   * @kind N\r\n   */\r\n  name?: Name;\r\n  /**\r\n   * The text corresponding to the nickname of the object the vCard represents.\r\n   * @kind NICKNAME\r\n   */\r\n  // nickname?: string | { work?: string, home?: string };\r\n  nickname?: string;\r\n\r\n  /**\r\n   * An image or photograph information that annotates some aspect of the object the vCard represents.\r\n   * @kind PHOTO\r\n   */\r\n  photo?: string | { value: string; param: BasicPropertyParameters };\r\n\r\n  /**\r\n   * The birth date of the object the vCard represents.\r\n   * @kind BDAY\r\n   */\r\n  birthday?: Date;\r\n  /**\r\n   * Date of marriage, or equivalent, of the object the vCard represents.\r\n   * @kind ANNIVERSARY\r\n   */\r\n  anniversary?: Date;\r\n  /**\r\n   * The components of the sex and gender identity of the object the vCard represents.\r\n   * @kind GENDER\r\n   */\r\n  gender?: Gender;\r\n\r\n  /***********************************************************************************************\r\n   * Delivery Addressing Properties\r\n   ***********************************************************************************************/\r\n\r\n  /**\r\n   * The components of the delivery address for the vCard object.\r\n   * @kind ADR\r\n   */\r\n  address?: Array<Address | { value: Address; param: BasicPropertyParameters }>;\r\n\r\n  /***********************************************************************************************\r\n   * Communications Properties\r\n   ***********************************************************************************************/\r\n\r\n  /**\r\n   * The telephone number for telephony communication with the object the vCard represents.\r\n   * @kind TEL\r\n   */\r\n  telephone?: Array<string | { value: string; param: BasicPropertyParameters }>;\r\n\r\n  /**\r\n   * Work facsimile\r\n   */\r\n  workFax?: string[];\r\n  /**\r\n   * Home facsimile\r\n   */\r\n  homeFax?: string[];\r\n\r\n  /**\r\n   * The electronic mail address for communication with the object the vCard represents.\r\n   * @kind EMAIL\r\n   */\r\n  email?: Array<string | { value: string; param: BasicPropertyParameters }>;\r\n\r\n  /**\r\n   * The address for work-related electronic mail communication\r\n   * @deprecated\r\n   */\r\n  workEmail?: string[];\r\n  /**\r\n   * The address for other electronic mail communication\r\n   * @deprecated\r\n   */\r\n  otherEmail?: string[];\r\n  /**\r\n   * The URI for instant messaging and presence protocol communications with the object the vCard represents.\r\n   * @kind IMPP\r\n   */\r\n  instantMessagingPresenceProtocol?: string;\r\n  /**\r\n   * The language(s) that may be used for contacting the entity associated with the vCard.\r\n   * @kind LANG\r\n   */\r\n  language?: Array<string | { value: string; param: BasicPropertyParameters }>;\r\n\r\n  /***********************************************************************************************\r\n   * Geographical Properties\r\n   ***********************************************************************************************/\r\n\r\n  /**\r\n   * Information related to the time zone of the object the vCard represents.\r\n   * @kind TZ\r\n   */\r\n  timezone?: string;\r\n\r\n  /**\r\n   * Information related to the global positioning of the object the vCard represents.\r\n   * @kind GEO\r\n   */\r\n  geoPosition?: string;\r\n\r\n  /***********************************************************************************************\r\n   * Organizational Properties\r\n   ***********************************************************************************************/\r\n\r\n  /**\r\n   * The position or job of the object the vCard represents.\r\n   * @kind TITLE\r\n   */\r\n  title?: string;\r\n  /**\r\n   * The function or part played in a particular situation by the object the vCard represents.\r\n   * @kind ROLE\r\n   */\r\n  role?: string;\r\n  /**\r\n   * A graphic image of a logo associated with the object the vCard represents.\r\n   * @kind LOGO\r\n   */\r\n  logo?: string | { value: string; param: BasicPropertyParameters };\r\n  /**\r\n   * The organizational name and units associated with the vCard.\r\n   * @kind ORG\r\n   */\r\n  organization?: string | { value: string; param: BasicPropertyParameters };\r\n  /**\r\n   * A member in the group this vCard represents.\r\n   * @kind MEMBER\r\n   */\r\n  member?: string;\r\n  /**\r\n   * A relationship between another entity and the entity represented by this vCard.\r\n   * @kind RELATED\r\n   */\r\n  related?: {\r\n    type:\r\n      | \"contact\"\r\n      | \"acquaintance\"\r\n      | \"friend\"\r\n      | \"met\"\r\n      | \"co-worker\"\r\n      | \"colleague\"\r\n      | \"co-resident\"\r\n      | \"neighbor\"\r\n      | \"child\"\r\n      | \"parent\"\r\n      | \"sibling\"\r\n      | \"spouse\"\r\n      | \"kin\"\r\n      | \"muse\"\r\n      | \"crush\"\r\n      | \"date\"\r\n      | \"sweetheart\"\r\n      | \"me\"\r\n      | \"agent\"\r\n      | \"emergency\";\r\n    value: string;\r\n  }[];\r\n\r\n  /***********************************************************************************************\r\n   * Explanatory Properties\r\n   ***********************************************************************************************/\r\n\r\n  /**\r\n   * Application category information about the vCard, also known as \"tags\".\r\n   * @kind CATEGORIES\r\n   */\r\n  categories?: string[];\r\n  /**\r\n   * Supplemental information or a comment that is associated with the vCard.\r\n   * @kind NOTE\r\n   */\r\n  note?: string;\r\n  /**\r\n   * The identifier for the product that created the vCard object.\r\n   * @kind PRODID\r\n   */\r\n  prodid?: string;\r\n  /**\r\n   * Revision information about the current vCard.\r\n   * @kind REV\r\n   */\r\n  rev?: string;\r\n  /**\r\n   * A digital sound content information that annotates some aspect of the vCard.\r\n   * This property is often used to specify the proper pronunciation of the name property value of the vCard.\r\n   * @kind SOUND\r\n   */\r\n  sound?: string;\r\n  /**\r\n   * A value that represents a globally unique identifier corresponding to the entity associated with the vCard.\r\n   * @kind UID\r\n   */\r\n  uid?: string;\r\n  /**\r\n   * To give a global meaning to a local PID source identifier.\r\n   * @kind CLIENTPIDMAP\r\n   */\r\n  clientpidmap?: string;\r\n  /**\r\n   * A uniform resource locator associated with the object to which the vCard refers.\r\n   * Examples for individuals include personal web sites, blogs, and social networking site identifiers.\r\n   * @kind URL\r\n   */\r\n  url?: string | { work: string; home: string };\r\n  /**\r\n   * The version of the vCard specification used to format this vCard.\r\n   * @kind VERSION\r\n   */\r\n  version?: string;\r\n\r\n  /***********************************************************************************************\r\n   * Security Properties\r\n   ***********************************************************************************************/\r\n\r\n  /**\r\n   * A public key or authentication certificate associated with the object that the vCard represents.\r\n   * @kind KEY\r\n   */\r\n  key?: string;\r\n\r\n  /***********************************************************************************************\r\n   * Calendar Properties\r\n   ***********************************************************************************************/\r\n  /**\r\n   * The URI for the busy time associated with the object that the vCard represents.\r\n   * @kind FBURL\r\n   */\r\n  fburl?: string;\r\n\r\n  /**\r\n   * The calendar user address to which a scheduling request should be sent for the object represented by the vCard.\r\n   * @kind CALADRURI\r\n   */\r\n  caladURI?: string;\r\n\r\n  /**\r\n   * The URI for a calendar associated with the object represented by the vCard.\r\n   * @kind CALURI\r\n   */\r\n  calenderURI?: string;\r\n\r\n  socialUrls?: any;\r\n}\r\n\r\nexport interface Address {\r\n  /**\r\n   * Represents the actual text that should be put on the mailing label when delivering a physical package\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * The post office box\r\n   * @deprecated Incompatibility with vCard Version 3\r\n   */\r\n  postOfficeBox?: string;\r\n\r\n  /**\r\n   * The extended address (e.g. apartment or suite number)\r\n   * @deprecated Incompatibility with vCard Version 3\r\n   */\r\n  extendedAddress?: string;\r\n\r\n  /**\r\n   * Street address\r\n   */\r\n  street?: string;\r\n\r\n  /**\r\n   * locality (e.g. city)\r\n   */\r\n  locality?: string;\r\n\r\n  /**\r\n   * region (e.g. state or province)\r\n   */\r\n  region?: string;\r\n\r\n  /**\r\n   * Postal code\r\n   */\r\n  postalCode?: string;\r\n\r\n  /**\r\n   * country name (full name)\r\n   */\r\n  countryName?: string;\r\n}\r\n\r\nexport interface Name {\r\n  /**\r\n   * Family Names (Surnames)\r\n   */\r\n  lastNames?: string;\r\n  /**\r\n   * First Names (Given Names)\r\n   */\r\n  firstNames?: string;\r\n  /**\r\n   * Additional Names\r\n   */\r\n  addtionalNames?: string;\r\n  /**\r\n   * Prefix for individual's name (Honorific Prefixes)\r\n   */\r\n  namePrefix?: string;\r\n  /**\r\n   * Suffix for individual's name (Honorific Suffixes)\r\n   */\r\n  nameSuffix?: string;\r\n}\r\n\r\n/**\r\n * To specify the components of the sex and gender identity of the object the vCard represents.\r\n */\r\nexport interface Gender {\r\n  /**\r\n   * sex (biological)\r\n   * @description\r\n   * M stands for \"male\", F stands for \"female\", O stands for \"other\", N stands for \"none or not applicable\", U stands for \"unknown\".\r\n   */\r\n  sex?: \"M\" | \"F\" | \"O\" | \"N\" | \"U\";\r\n\r\n  /**\r\n   * Gender identity\r\n   */\r\n  text?: string;\r\n}\r\n"]}